name: Approve Proposal to PR

on:
  issue_comment:
    types: [created]

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  apply:
    if: |
      github.event.issue.state == 'open' &&
      contains(join(github.event.issue.labels.*.name, ','), 'proposal') &&
      startsWith(github.event.comment.body, '/approve')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Ensure commenter has write permission
        id: perm
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const user = context.payload.comment.user.login;
            const { data } = await github.repos.getCollaboratorPermissionLevel({ owner, repo, username: user });
            core.info(`permission: ${data.permission}`);
            if (!['admin','write','maintain'].includes(data.permission)) {
              core.setFailed(`@${user} に書き込み権限がありません。`);
            }

      - name: Extract fields from Issue (title/body)
        id: extract
        uses: actions/github-script@v7
        with:
          script: |
            const issue = context.payload.issue;
            const body = issue.body || '';
            function pick(label) {
              const re = new RegExp(`###\\s+${label}\\n([\\s\\S]*?)(?:\\n### |$)`, 'm');
              const m = body.match(re);
              return m ? m[1].trim() : '';
            }
            const proposalTitle = (issue.title || '').replace(/^\[提案\]\s*/,'').trim();
            const proposal = proposalTitle || pick('提案') || pick('proposal');
            const reason = pick('内容や理由') || pick('reason');
            const author = pick('登録者') || pick('author');
            if (!proposal) core.setFailed('提案が取得できません');
            if (!reason) core.setFailed('内容や理由が取得できません');
            if (!author) core.setFailed('登録者が取得できません');

            // 引数の明示ファイル名: /approve <path>
            const cmd = context.payload.comment.body.trim();
            const m = cmd.match(/^\/approve\s+(\S+)/);
            const explicit = m ? m[1] : '';

            function toFileName(name) {
              const base = name
                .replace(/[\\/\r\n\t]+/g,' ')
                .trim()
                .replace(/\s+/g,'_')
                .replace(/["'`]/g,'')
                .replace(/\.md$/i,'');
              return base + '.md';
            }
            const fileName = explicit ? explicit.replace(/^rules\//,'') : toFileName(proposal);
            const path = `rules/${fileName}`;

            core.setOutput('proposal', proposal);
            core.setOutput('reason', reason);
            core.setOutput('author', author);
            core.setOutput('path', path);

      - name: Create branch and commit change
        id: commit
        uses: actions/github-script@v7
        env:
          PROPOSAL: ${{ steps.extract.outputs.proposal }}
          REASON: ${{ steps.extract.outputs.reason }}
          AUTHOR: ${{ steps.extract.outputs.author }}
          PATH: ${{ steps.extract.outputs.path }}
        with:
          script: |
            const { owner, repo } = context.repo;
            const branch = `approve-${context.issue.number}`;
            const baseRef = 'heads/main';
            const { data: base } = await github.git.getRef({ owner, repo, ref: baseRef });
            // create branch if missing
            try {
              await github.git.createRef({ owner, repo, ref: `refs/heads/${branch}`, sha: base.object.sha });
            } catch (e) {
              if (e.status !== 422) throw e;
            }

            const path = process.env.PATH;
            const proposal = process.env.PROPOSAL;
            const reason = process.env.REASON;
            const author = process.env.AUTHOR;

            // fetch existing file sha
            let sha = undefined;
            try {
              const res = await github.repos.getContent({ owner, repo, path, ref: branch });
              if (!Array.isArray(res.data)) sha = res.data.sha;
            } catch {}

            const content = `# ${proposal}\n\n登録者: ${author}\n\n${reason}\n`;
            const message = sha ? `feat(rule): update ${path}` : `feat(rule): add ${path}`;
            await github.repos.createOrUpdateFileContents({ owner, repo, path, message, content: Buffer.from(content,'utf8').toString('base64'), branch, sha });

            core.setOutput('branch', branch);

      - name: Open Pull Request (assign owner)
        uses: actions/github-script@v7
        env:
          BRANCH: ${{ steps.commit.outputs.branch }}
        with:
          script: |
            const { owner, repo } = context.repo;
            const branch = process.env.BRANCH;
            const number = context.issue.number;
            const prTitle = `承認: ルール反映 (${branch})`;
            const prBody = [
              `このPRはIssue #${number} の /approve から作成されました。`,
              `マージで公開し、Issueは自動的にクローズされます。`,
              `Closes #${number}`,
            ].join('\n');
            try {
              const { data: pr } = await github.pulls.create({ owner, repo, title: prTitle, head: branch, base: 'main', body: prBody });
              // assign repo owner if存在
              try { await github.issues.addAssignees({ owner, repo, issue_number: pr.number, assignees: [owner] }); } catch {}
            } catch (e) {
              if (e.status !== 422) throw e; // PR exists
            }
